#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 28 09:30:22 2020

@author: aohma

Script to generate a processed omni database.
"""

import numpy as np
import pandas as pd
from dipole import Dipole

# Input file
filepath = '/SPENCEdata/Research/database/SHEIC/'
omnifile = 'omni_1min.h5'
omniprocessedfile = 'omni_processed.h5'

# Date range
fromDate = '"2013-01-01 00:00"' # from (and inluding)
# toDate = '"2021-02-01 00:00"' # to (not including)
toDate = '"2023-05-01 00:00"' # to (not including)

# Columns to include from the unaltered omni data stored in omni_1min.h5.
# This file is generated by the omni_download_1min_data() function.
columns = ['BX_GSE','BY_GSE','BZ_GSE', 'BY_GSM', 'BZ_GSM',
   'flow_speed', 'Vx', 'Vy', 'Vz',
   'proton_density','Pressure',
   'AL_INDEX', 'AU_INDEX', 'SYM_D', 'SYM_H', 'ASY_D', 'ASY_H',
   'PC_N_INDEX']

# Window when estimating mean and variance of the IMF clock angle
caStart = 30 # Minutes before each measurement
caEnd = 0 # Minutes after each measurement

alsoAverageIMF_vsw = True

# Upper limit when interpolating data gaps in the SW data
dataGapLimit = 10

# Read the file
print(f"Opening {filepath+omnifile}")
omni = pd.read_hdf(filepath+omnifile,where='index>={}&index<{}'.format(fromDate,toDate),columns=columns)
omni = omni.rename(columns={"BX_GSE":"Bx","BY_GSM":"By","BZ_GSM":"Bz","flow_speed":"V"})

#omni.index = omni.index.shift(30,freq='s') # Change to get the timetag in the center of each 1min avg
#omni = omni.reindex(pd.date_range(omni.index[0],omni.index[-1],freq='30s'))
#omni = omni.interpolate().reindex(pd.date_range(omni.index[1],omni.index[-2],freq='1min'))

# Calculate clock angle mean and variance
print(f"Calculating IMF clock angle mean and variance, averaged over {caStart+caEnd} minutes")

ca = pd.DataFrame()
ca['ca'] = np.arctan2(omni['By'],omni['Bz'])
ca['sin'] = np.sin(ca['ca'])
ca['cos'] = np.cos(ca['ca'])
ca[['sinMean','cosMean']] = ca[['sin','cos']].rolling(window=1+caStart+caEnd,min_periods=0).mean()
ca['caMean'] = np.arctan2(ca['sinMean'],ca['cosMean'])
ca['caVar'] = 1-np.sqrt(ca['sinMean']**2+ca['cosMean']**2) # Circular variance
ca['caCount'] = ca['ca'].rolling(window=1+caStart+caEnd,min_periods=0).count()
ca.index = ca.index.shift(-caEnd,freq='min')

# Calculate G1 and G2 for the Tsyganenko 2001 model, mean of the previous hour
print(f"Calculating G1 and G2 for Tsyganenko 2001 model using mean of the previous hour")

G = pd.DataFrame()
G['Bperp'] = np.sqrt(omni['By']**2+omni['Bz']**2)
G['Bs'] = omni['Bz'].copy()
G['Bs'][G['Bs']>0]=0
G['Bs'] = abs(G['Bs'])
G['g1'] = omni['V']*((G['Bperp']/40)**2/(1+G['Bperp']/40))*np.sin(np.arctan2(omni['By'],omni['Bz'])/2)**3 
G['g2'] = 0.005*omni['V']*G['Bs']
G[['G1','G2']] = G[['g1','g2']].rolling(window=60,min_periods=0).mean()
G.index = G.index.shift(1,freq='min') 

# Interpolate data gaps <= dataGapLimit
# mask = omni.copy()
# grp = ((mask.notnull() != mask.shift().notnull()).cumsum())
# grp['ones'] = 1
# for i in omni.columns:
#     mask[i] = (grp.groupby(i)['ones'].transform('count') < dataGapLimit) | omni[i].notnull()
# omni = omni.interpolate()[mask]
  
# Coupling
B_y,B_z,V_x = omni['By']*1e-9, omni['Bz']*1e-9, abs(omni['Vx'])*1e3
B_t = np.sqrt(B_y**2+B_z**2)
clock_angle = np.arctan2(B_y,B_z)
omni['PhiD'] = 3.3e5*V_x**(4./3)*B_t*np.sin(abs(clock_angle)/2)**(9./2)/1e3


omni['tilt'] = np.nan
years = omni.index.year.unique()
for i,year in enumerate(years):
    # if i > 0:
    #     print("Skip",year)
    #     continue
    dip = Dipole(year+0.5)
    tmpi = omni.index.year == year
    omni.loc[tmpi,'tilt'] = dip.tilt(omni[tmpi].index)

# Average Bx/By/Bz/Vx/V/PhiD?
if alsoAverageIMF_vsw:
    avgcols = ['PhiD','Bx','By','Bz','Vx','Vy','Vz','V','proton_density', 'Pressure']
    print(f"Also averaging {', '.join(avgcols)} over {caStart+caEnd} minutes")
    for avgcol in avgcols:
        omni.loc[:,avgcol] = omni[avgcol].rolling(window=1+caStart+caEnd,min_periods=0).mean()


omni = omni.join(ca[['caMean','caVar','caCount']]).join(G[['G1','G2']])
omni[['G1','G2']] = omni[['G1','G2']].fillna(0)

omni.to_hdf(filepath+omniprocessedfile,'omni',mode='w',format='t', data_columns=True)
